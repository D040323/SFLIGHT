PROCEDURE "SAP_HANA_DA"."sfligh::PR_GENERATE_RANDOM_PASSWORD" ( out lv_gen_pwd string, out lv_err_msg string ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER
	--DEFAULT SCHEMA <default_schema_name>
	AS
BEGIN

/***************************** 
	Write your procedure logic 
 *****************************/


/*DECLARE lc_uppercase CONSTANT nvarchar(26) := 'ABCDEFGHJKLMNPQRSTUVWXYZ';
DECLARE lc_lowercase CONSTANT nvarchar(26) := 'abcdefghijklmnopqrstuvwxyz';
DECLARE lc_digits CONSTANT nvarchar(8) := '23456789';
DECLARE lc_specials CONSTANT nvarchar(19) := '@$%&/\()=+-#~<>[]{}';
DECLARE lv_mnm_pwd_lngth nvarchar(20); --minimal_password_length
*/
DECLARE lc_char_array NVARCHAR(100) ARRAY;
DECLARE lv_array_index nvarchar(20) := 1;
DECLARE lv_pwd_lyout nvarchar(19); --password_layout
DECLARE v_index1 INT := 0;
DECLARE v_index2 INT := 0;
DECLARE lv_error_code INT := 1;
--DECLARE lv_err_msg nvarchar(128);
DECLARE lv_hdb_rel INT := 0; --HDB release
DECLARE lv_mnm_pwd_lngth nvarchar(20); --password length

lc_char_array := ARRAY(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F','G','H','J','K','L','M','N','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','j','k','l','m','n','p','q','r','s','t','u','v','w','x','y','Z','@','$','%','&');

-- minimal_password_length
Select VALUE  into lv_mnm_pwd_lngth from "PUBLIC"."M_PASSWORD_POLICY" where PROPERTY = 'minimal_password_length';
-- Retrieve Password Policies
Select VALUE  into lv_pwd_lyout from "PUBLIC"."M_PASSWORD_POLICY" where PROPERTY = 'password_layout';
-- Needed to determine the HANA SPS
select SUBSTRING( VERSION,6,3) into lv_hdb_rel from "SYS"."M_DATABASE";
--SPS12 = 1.00.122.02. 1473345179

lv_gen_pwd := ''; --initialize

	IF lv_hdb_rel >= 90 then
	
		while :lv_error_code <> 0 do
			lv_array_index := ( 
			 	ROUND ( ( SQRT ( SECOND ( CURRENT_TIMESTAMP ) ) / RAND_SECURE( ) )
			 	
			 	 	 , 0, ROUND_CEILING )
			 	 	 );--lv_array_index := ( ;
			 	 	 
		        IF :lv_array_index > 0 AND :lv_array_index <= CARDINALITY(:lc_char_array) THEN          
		          
		            lv_gen_pwd := :lv_gen_pwd||:lc_char_array[:lv_array_index];
				-- check if valid		
					 CALL "PUBLIC"."IS_VALID_PASSWORD"(:lv_gen_pwd, lv_error_code, lv_err_msg);
		
					 if lv_error_code = 0 then
					     --  ALTER USER D040323 PASSWORD
					     lv_err_msg := 'password generated ' || :lv_gen_pwd;
					     BREAK;
				     else
					 	lv_err_msg := lv_err_msg;
				     end if; 
		   		END IF; -- IF :lv_array_index > 0 AND :lv_array_index <= CARDINALITY(:lc_char_array) THEN
		END WHILE ; --while :lv_error_code <> 0 do
	ELSE 
		-- generate Password
		WHILE :v_index1 <= lv_mnm_pwd_lngth DO
			FOR v_index2 IN 0 .. 3 DO
				 lv_array_index := ( 
				 	ROUND ( ( SQRT ( SECOND ( CURRENT_TIMESTAMP ) ) / RAND_SECURE( ) )
				 	
				 	 	 , 0, ROUND_CEILING )
				 	 	 );--lv_array_index := ( ;
			        IF :lv_array_index > 0 AND :lv_array_index <= CARDINALITY(:lc_char_array) THEN          
			            lv_gen_pwd := :lv_gen_pwd||:lc_char_array[:lv_array_index];
			       	END IF; -- IF :lv_array_index > 0 AND :lv_array_index <= CARDINALITY(:lc_char_array) THEN          
			     		lv_array_index := 0;
			  END FOR;
		 	v_index1 := :v_index1 + 1;	    
		END WHILE; --WHILE :v_index1 <= lv_mnm_pwd_lngth DO
	  lv_err_msg := 'password generated ' || :lv_gen_pwd;
	END IF ; --IF lv_hdb_rel >= 90 then
END;